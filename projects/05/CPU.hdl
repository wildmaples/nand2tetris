// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

// ⭐️ Anatomy of the C-Instruction ⭐️
// 15 14 13 12 - 11 10 9  8  - 7  6  5  4  - 3  2  1  0
// 1   1  1  a - c1 c2 c3 c4 - c5 c6 d1 d2 - d3 j1 j2 j3

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Check for comp mnemonic, A or M
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=ALUy);

    // Compute the instruction
    ALU(x=DRegisterOut,y=ALUy, zx=instruction[11], nx=instruction[10],
    zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    out=ALUout, zr=ALUzero, ng=ALUnegative);

    // Store at destination:

    // A-Register
    Not(in=instruction[15], out=UseAInstruction);
    Or(a=UseAInstruction, b=instruction[5], out=SaveAInstruction);
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=AInstruction);
    ARegister(in=AInstruction, load=SaveAInstruction, out=ARegisterOut, out[0..14]=addressM);

    // D-Register
    And(a=instruction[15], b=instruction[4], out=DInstruction);
    DRegister(in=ALUout, load=DInstruction, out=DRegisterOut);

    // Memory
    And(a=instruction[15], b=instruction[3], out=writeToMemory, out=writeM);
    Mux16(a=false, b=ALUout, sel=writeToMemory, out=outM);

    // Program Counter:

    // Determine if the ALU output is positive
    // Because ALU doesn't provide that
    Or(a=ALUnegative, b=ALUzero, out=negativeOrZero);
    Not(in=negativeOrZero, out=ALUpositive);

    And(a=ALUpositive, b=instruction[0], out=jumpIfPositive);
    And(a=ALUzero, b=instruction[1], out=jumpIfZero);
    And(a=ALUnegative, b=instruction[2], out=jumpIfNegative);

    Or(a=jumpIfNegative, b=jumpIfZero, out=jumpIfNegativeorZero);
    Or(a=jumpIfNegativeorZero, b=jumpIfPositive, out=jumpIfNegativeorZeroorPositive);

    // Ensure instruction is C-instruction
    And(a=jumpIfNegativeorZeroorPositive, b=instruction[15], out=loadAddress);

    // Only use address from A-register if it's a jump
    Mux16(a=false, b=ARegisterOut, sel=loadAddress, out=nextAddress);

    PC(in=nextAddress, load=loadAddress, inc=true, reset=reset, out[0..14]=pc);
}
